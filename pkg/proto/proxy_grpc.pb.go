// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/proto/proxy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HolocronClient is the client API for Holocron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HolocronClient interface {
	// Sends a greeting
	Insert(ctx context.Context, in *EmbeddingWithMetadataRequest, opts ...grpc.CallOption) (*InsertStatus, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type holocronClient struct {
	cc grpc.ClientConnInterface
}

func NewHolocronClient(cc grpc.ClientConnInterface) HolocronClient {
	return &holocronClient{cc}
}

func (c *holocronClient) Insert(ctx context.Context, in *EmbeddingWithMetadataRequest, opts ...grpc.CallOption) (*InsertStatus, error) {
	out := new(InsertStatus)
	err := c.cc.Invoke(ctx, "/holocron.Holocron/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holocronClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/holocron.Holocron/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HolocronServer is the server API for Holocron service.
// All implementations must embed UnimplementedHolocronServer
// for forward compatibility
type HolocronServer interface {
	// Sends a greeting
	Insert(context.Context, *EmbeddingWithMetadataRequest) (*InsertStatus, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	mustEmbedUnimplementedHolocronServer()
}

// UnimplementedHolocronServer must be embedded to have forward compatible implementations.
type UnimplementedHolocronServer struct {
}

func (UnimplementedHolocronServer) Insert(context.Context, *EmbeddingWithMetadataRequest) (*InsertStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedHolocronServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedHolocronServer) mustEmbedUnimplementedHolocronServer() {}

// UnsafeHolocronServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HolocronServer will
// result in compilation errors.
type UnsafeHolocronServer interface {
	mustEmbedUnimplementedHolocronServer()
}

func RegisterHolocronServer(s grpc.ServiceRegistrar, srv HolocronServer) {
	s.RegisterService(&Holocron_ServiceDesc, srv)
}

func _Holocron_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbeddingWithMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolocronServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/holocron.Holocron/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolocronServer).Insert(ctx, req.(*EmbeddingWithMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holocron_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolocronServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/holocron.Holocron/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolocronServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Holocron_ServiceDesc is the grpc.ServiceDesc for Holocron service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Holocron_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "holocron.Holocron",
	HandlerType: (*HolocronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _Holocron_Insert_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Holocron_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/proxy.proto",
}
